[{"/Users/mereilim/Documents/codingDojo/JAVA/SPRING-DATA/ExpenseTracker/app/src/index.js":"1","/Users/mereilim/Documents/codingDojo/JAVA/SPRING-DATA/ExpenseTracker/app/src/serviceWorker.js":"2","/Users/mereilim/Documents/codingDojo/JAVA/SPRING-DATA/ExpenseTracker/app/src/App.js":"3","/Users/mereilim/Documents/codingDojo/JAVA/SPRING-DATA/ExpenseTracker/app/src/Category.js":"4","/Users/mereilim/Documents/codingDojo/JAVA/SPRING-DATA/ExpenseTracker/app/src/Home.js":"5","/Users/mereilim/Documents/codingDojo/JAVA/SPRING-DATA/ExpenseTracker/app/src/AppNav.js":"6"},{"size":493,"mtime":1608665962592,"results":"7","hashOfConfig":"8"},{"size":5190,"mtime":1608666012901,"results":"9","hashOfConfig":"8"},{"size":664,"mtime":1608665773824,"results":"10","hashOfConfig":"8"},{"size":980,"mtime":1608665865502,"results":"11","hashOfConfig":"8"},{"size":438,"mtime":1608665910409,"results":"12","hashOfConfig":"8"},{"size":882,"mtime":1608665841358,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":1,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"33zvet",{"filePath":"16","messages":"17","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/mereilim/Documents/codingDojo/JAVA/SPRING-DATA/ExpenseTracker/app/src/index.js",["27","28"],"/Users/mereilim/Documents/codingDojo/JAVA/SPRING-DATA/ExpenseTracker/app/src/serviceWorker.js",["29"],"// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.1/8 is considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister();\n      });\n    }","/Users/mereilim/Documents/codingDojo/JAVA/SPRING-DATA/ExpenseTracker/app/src/App.js",[],"/Users/mereilim/Documents/codingDojo/JAVA/SPRING-DATA/ExpenseTracker/app/src/Category.js",[],"/Users/mereilim/Documents/codingDojo/JAVA/SPRING-DATA/ExpenseTracker/app/src/Home.js",[],"/Users/mereilim/Documents/codingDojo/JAVA/SPRING-DATA/ExpenseTracker/app/src/AppNav.js",[],{"ruleId":"30","severity":1,"message":"31","line":5,"column":13,"nodeType":"32","messageId":"33","endLine":5,"endColumn":26},{"ruleId":"34","severity":2,"message":"35","line":13,"column":1,"nodeType":"32","messageId":"36","endLine":13,"endColumn":16},{"ruleId":null,"fatal":true,"severity":2,"message":"37","line":134,"column":6},"no-unused-vars","'serviceWorker' is defined but never used.","Identifier","unusedVar","no-undef","'reportWebVitals' is not defined.","undef","Parsing error: Unexpected token\n\n\u001b[0m \u001b[90m 132 | \u001b[39m        registration\u001b[33m.\u001b[39munregister()\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 133 | \u001b[39m      })\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 134 | \u001b[39m    }\u001b[0m\n\u001b[0m \u001b[90m     | \u001b[39m     \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m"]